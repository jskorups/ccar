@model ccar.Models.ActionModel

@{
    /**/

    Layout = null;
}


@using (Html.BeginForm("AddOrEdit", "Action", FormMethod.Post, new { onsubmit = "return SubmitForm(this)" }))
{
    @Html.HiddenFor(model => model.id)
    @Html.HiddenFor(model => model.originationDate)
    @Html.HiddenFor(model => model.idInitiator)

    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @id = "koko" })


    <div class="form-group container">
        <div class="row">
            <div class="col-md-4 mb-4">
                @Html.Label("Reason*", new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.idReason, null, new { @class = "koko" })

                @*zmodyfikowana lista do reson*@
                @{
                    var listTempReason = (ccar.Models.ReasonModel.GetReasonList());
                    listTempReason.Add(new ccar.Models.ReasonModel() { id = 0, reason = null });
                }
                @Html.DropDownListFor(model => model.idReason, new SelectList(listTempReason, "id", "reason"), new { @class = "form-control" })


                @*@Html.EditorFor(model => model.idReason, new { htmlAttributes = new { @class = "form-control" } })*@
            </div>


            @*<div class="col-md-1 mb-1">
                    @Html.Label("Add", new { @class = "control-label" })
                    <button type="button" class="btn btn-default" style="display:block; background-color:darkmagenta" onclick="PopupForm('@Url.Action("AddOrEditRsn2","Reason")')"> <span class="glyphicon glyphicon-plus" style="color:white; background-color:darkmagenta" aria-hidden="true"></span></button>
                </div>*@
            <div class="col-md-1 mb-1" style="margin-left:-60px;">
                @Html.Label("More", new { @class = "control-label" })
                <button type="button" class="btn btn-default" style="display:block; background-color:indianred" onclick="location.href='@Url.Action("ReasonList", "Reason")'"> <span class="glyphicon glyphicon-edit" style="color:white; background-color:indianred" aria-hidden="true"></span></button>
            </div>
            @*<div class="col-md-3 mb-3">
                @Html.Label("Initiator", new { @class = "control-label" })*@
            @*@Html.EditorFor(model => model.idInitiator, new { htmlAttributes = new { @class = "form-control" } })*@
            @*@Html.DropDownListFor(model => model.idInitiator, new SelectList(ccar.Models.initiator.GetInitiatorsList(), "id", "name"), new { @class = "form-control" })
                </div>*@
            @*<div class="col-md-4 mb-4">
                    @Html.Label("Origination Date", new { @class = "control-label" })
                    @Html.EditorFor(model => model.originationDate, new { htmlAttributes = new { @class = "form-control" } })

                </div>*@
            <div class="col-md-4 mb-4" style="margin-left:-20px;">

                @Html.Label("Type of action*", new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.idTypeOfAction, null, new { @class = "koko" })

                @*zmodyfikowana lista do type of action*@

                @{
                    var listTempToA = (ccar.Models.TypeOfActionModel.GetTypeOfActionList());
                    listTempToA.Add(new ccar.Models.TypeOfActionModel() { id = 0, typeOfAction1 = null });
                }

                @Html.DropDownListFor(model => model.idTypeOfAction, new SelectList(listTempToA.OrderBy(x => x.id), "id", "typeOfAction1"), new { @class = "form-control" })
            </div>


            @*<div class="col-md-1 mb-1">
                    @Html.Label("Add", new { @class = "control-label" })
                    <button type="button" class="btn btn-default" style="display:block; background-color:darkmagenta" onclick="ToaForm('@Url.Action("AddOrEditToA2","typeOfAction")')"> <span class="glyphicon glyphicon-plus" style="color:white; background-color:darkmagenta" aria-hidden="true"></span></button>
                </div>*@
            <div class="col-md-1 mb-1 " style="margin-left:-60px;">
                @Html.Label("More", new { @class = "control-label" })
                <button type="button" class="btn btn-default" style="display:block; background-color:indianred" onclick="location.href='@Url.Action("ToAlist", "typeOfAction")'"> <span class="glyphicon glyphicon-edit" style="color:white; background-color:indianred" aria-hidden="true"></span></button>
            </div>

            <div class="col-md-3 mb-3" style="margin-left:-20px;">
                @Html.Label("Responsible*", new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.idResponsible, null, new { @class = "koko" })
                @*@Html.EditorFor(model => model.idResponsible, new { htmlAttributes = new { @class = "form-control" } })*@
                @*@Html.DropDownListFor(model => model.idResponsible, new SelectList(ccar.Models.responsible.GetResponsibleList(), "id", "name"), new { @class = "form-control" })*@

                @*zmodyfikowana lista do users*@

                @{
                    var listOfUser = (ccar.Models.UserModel.getUsersList());
                    listOfUser.Add(new ccar.Models.UserModel() { id = 0, email = null, firstname = null, surname = null, name = null });
                }
                @Html.DropDownListFor(model => model.idResponsible, new SelectList(listOfUser.OrderBy(x => x.id), "id", "name"), new { @class = "form-control" })

            </div>
            <div class="col-md-1 mb-1 " style="margin-left:-20px;">
                @Html.Label("More", new { @class = "control-label" })
                <button type="button" class="btn btn-default" style="display:block; background-color:indianred" onclick="location.href='@Url.Action("UsersList", "Users")'"> <span class="glyphicon glyphicon-edit" style="color:white; background-color:indianred" aria-hidden="true"></span></button>
            </div>

        </div>
    </div>

    <div class="form-group container">
        <div class="row">
            <div class="col-md-4 mb-4">


                @*@Html.Label("problem", new { @class = "control-label" })
                    @Html.ValidationMessageFor(m => m.problem, "wtf???", new { htmlAttributes = new { @class = "form-control" } })*@
                @*@Html.EditorFor(model => model.problem, new { htmlAttributes = new { @class = "form-control" } })*@

                @*@Html.TextAreaFor(model => model.problem, 5, 39, new { htmlAttributes = new { @class = "form-control" } })*@
                @*@Html.TextAreaFor(model => model.problem, new { htmlAttributes = new { @class = "form-control" } })*@


                @Html.Label("Problem*", new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.problem, null, new { @class = "koko" })
                @Html.TextAreaFor(model => model.problem, 5, 39, new { htmlAttributes = new { @class = "form-control" } })



            </div>
            <div class="col-md-4 mb-4">
                @Html.Label("Root Cause", new { @class = "control-label" })
                @Html.TextAreaFor(model => model.rootCause, 5, 39, new { htmlAttributes = new { @class = "form-control" } })
                @*@Html.EditorFor(model => model.rootCause, new { htmlAttributes = new { @class = "form-control", @style = "height: 100px;" } })*@

            </div>
            <div class="col-md-4 mb-4">
                @Html.Label("Corrective Action", new { @class = "control-label" })

                @Html.TextAreaFor(model => model.correctiveAction, 4, 39, new { htmlAttributes = new { @class = "form-control" } })
                @*@Html.EditorFor(model => model.correctiveAction, new { htmlAttributes = new { @class = "form-control", @style = "height: 100px;" } })*@
            </div>
        </div>
    </div>

    <div class="form-group container">
        <div class="row">
            <div class="col-md-4 mb-4">
                @Html.Label("Target date*", new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.targetDate, null, new { @class = "koko" })
                @Html.EditorFor(model => model.targetDate, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-md-4 mb-4">
                @Html.Label("Progress*", new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.idProgress, null, new { @class = "koko" })
                @*@Html.EditorFor(model => model.idProgress, new { htmlAttributes = new { @class = "form-control" } })*@


                @{
                    var listOfProg = (ccar.Models.ProgressModel.GetProgressList());
                    listOfProg.Add(new ccar.Models.ProgressModel() { id = 0, progressValue = null });
                }
                @Html.DropDownListFor(model => model.idProgress, new SelectList(listOfProg.OrderBy(x => x.id), "id", "progressValue"), new { @class = "form-control" })
            </div>
            @*<div class="col-md-4 mb-4">
                    @Html.Label("Completion date", new { @class = "control-label" })
                    @Html.EditorFor(model => model.completionDate, new { htmlAttributes = new { @class = "form-control" } })
                </div>*@
        </div>
    </div>
    <div class="form-group container">
        <div class="row">
            <div class="col-md-4 mb-4">
                @Html.Label("Efficiency measure*", new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.measureEffic, null, new { @class = "koko" })
                @Html.EditorFor(model => model.measureEffic, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-md-4 mb-4">
                @Html.Label("Date of efficiency*", new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.dateOfEffic, null, new { @class = "koko" })
                @Html.EditorFor(model => model.dateOfEffic, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
    </div>

    <div class="form-group container">
        <div class="row">
            <div class="col-md-12 mb-12 text-center">
                <input type="submit" value="Submit" class="btn btn-success" style="width:250px; height:40px" />
                <input type="reset" value="Reset" class="btn btn-danger" style="width:250px; height:40px" />
            </div>
        </div>
    </div>



    <div class="form-group container">
        <div class="row">
            <div class="col-md-5 mb-5 text-center">
            </div>
            <div class="col-md-5 mb-5 text-center">
            </div>
            <div class="col-md-2 mb-2 text-center">
                <span style="color:red; font-style:oblique;">* Required</span>
            </div>


        </div>
    </div>

    <script>
   
        function SubmitForm(form) {
            $.validator.unobtrusive.parse(form);
            if ($(form).valid()) {
                $.ajax({
                    type: "POST",
                    url: form.action,
                    data: $(form).serialize(),
                    success: function (data) {
                        //if (data.success) {
                        Popup.dialog('close');
                        dataTable.ajax.reload();
                        
                            $.notify(data.message, {
                                globalPosition: "top center",
                                className: "success"

                            })

                        //}
                    }
                });
            }
            return false;
        }
    </script>
}


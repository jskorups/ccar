@model ccar.Models.action

@{
    /**/

    Layout = null;
}

<!DOCTYPE html>


@using (Html.BeginForm("AddOrEdit", "Action", FormMethod.Post, new { onsubmit = "return SubmitForm(this)" }))
{
    @Html.HiddenFor(model => model.id)
    @Html.HiddenFor(model => model.originationDate)
    @Html.HiddenFor(model => model.idInitiator)

    <div class="form-group row">
        <div class="col-md-3 mb-3">
            @Html.Label("Reason", new { @class = "control-label" })
            @*@Html.EditorFor(model => model.idReason, new { htmlAttributes = new { @class = "form-control" } })*@
            @Html.ValidationMessageFor(model => model.Reason)
            @Html.DropDownListFor(model => model.idReason, new SelectList(ccar.Models.Reason.GetReasonList(), "id", "reason"), new { @class = "form-control" })
        </div>
        <div class="col-md-1 mb-1">
            @Html.Label("Add", new { @class = "control-label" })
            <button type="button" class="btn btn-default" style="display:block; background-color:darkmagenta" onclick="PopupForm('@Url.Action("AddOrEditRsn","Reason")')"> <span class="glyphicon glyphicon-plus" style="color:white; background-color:darkmagenta" aria-hidden="true"></span></button>
        </div>
        @*<div class="col-md-3 mb-3">
            @Html.Label("Initiator", new { @class = "control-label" })*@
        @*@Html.EditorFor(model => model.idInitiator, new { htmlAttributes = new { @class = "form-control" } })*@
        @*@Html.DropDownListFor(model => model.idInitiator, new SelectList(ccar.Models.initiator.GetInitiatorsList(), "id", "name"), new { @class = "form-control" })
            </div>*@
        @*<div class="col-md-4 mb-4">
                @Html.Label("Origination Date", new { @class = "control-label" })
                @Html.EditorFor(model => model.originationDate, new { htmlAttributes = new { @class = "form-control" } })

            </div>*@
        <div class="col-md-3 mb-3">
            @Html.Label("Type of action", new { @class = "control-label" })
            @Html.DropDownListFor(model => model.idTypeOfAction, new SelectList(ccar.Models.typeOfAction.GetTypeOfActionList(), "id", "typeOfAction1"), new { @class = "form-control" })
        </div>
        <div class="col-md-1 mb-1">
            @Html.Label("Add", new { @class = "control-label" })
            <button type="button" class="btn btn-default" style="display:block; background-color:darkmagenta"> <span class="glyphicon glyphicon-plus" style="color:white; background-color:darkmagenta" aria-hidden="true"></span></button>
        </div>

        <div class="col-md-3 mb-3">
            @Html.Label("Responsible", new { @class = "control-label" })
            @*@Html.EditorFor(model => model.idResponsible, new { htmlAttributes = new { @class = "form-control" } })*@
            @Html.DropDownListFor(model => model.idResponsible, new SelectList(ccar.Models.responsible.GetResponsibleList(), "id", "name"), new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group row">
        <div class="col-md-4 mb-4">
            @Html.Label("Problem", new { @class = "control-label" })
            @*@Html.EditorFor(model => model.problem, new { htmlAttributes = new { @class = "form-control" } })*@

            @Html.TextAreaFor(model => model.problem, 5, 39, new { htmlAttributes = new { @class = "form-control" } })
            @*@Html.TextAreaFor(model => model.problem, new { htmlAttributes = new { @class = "form-control" } })*@

        </div>
        <div class="col-md-4 mb-4">
            @Html.Label("Root Cause", new { @class = "control-label" })
            @Html.TextAreaFor(model => model.rootCause, 5, 39, new { htmlAttributes = new { @class = "form-control" } })
            @*@Html.EditorFor(model => model.rootCause, new { htmlAttributes = new { @class = "form-control", @style = "height: 100px;" } })*@

        </div>
        <div class="col-md-4 mb-4">
            @Html.Label("Corrective Action", new { @class = "control-label" })

            @Html.TextAreaFor(model => model.correctiveAction, 4, 39, new { htmlAttributes = new { @class = "form-control" } })
            @*@Html.EditorFor(model => model.correctiveAction, new { htmlAttributes = new { @class = "form-control", @style = "height: 100px;" } })*@
        </div>
    </div>
    <div class="form-group row">

        <div class="col-md-4 mb-4">
            @Html.Label("Target date", new { @class = "control-label" })
            @Html.EditorFor(model => model.targetDate, new { htmlAttributes = new { @class = "form-control" } })
        </div>
        <div class="col-md-4 mb-4">
            @Html.Label("Progress", new { @class = "control-label" })
            @*@Html.EditorFor(model => model.idProgress, new { htmlAttributes = new { @class = "form-control" } })*@
            @Html.DropDownListFor(model => model.idProgress, new SelectList(ccar.Models.Progress.GetProgressList(), "id", "progressValue"), new { @class = "form-control" })
        </div>
        @*<div class="col-md-4 mb-4">
                @Html.Label("Completion date", new { @class = "control-label" })
                @Html.EditorFor(model => model.completionDate, new { htmlAttributes = new { @class = "form-control" } })
            </div>*@
    </div>

    <div class="form-group row">

        <div class="col-md-4 mb-4">
            @Html.Label("Efficiency measure", new { @class = "control-label" })
            @Html.EditorFor(model => model.measureEffic, new { htmlAttributes = new { @class = "form-control" } })
        </div>
        <div class="col-md-4 mb-4">
            @Html.Label("Date of efficiency", new { @class = "control-label" })
            @Html.EditorFor(model => model.dateOfEffic, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group row">
        <div class="col-md-12 mb-12 text-center">
            <input type="submit" value="Submit" class="btn btn-success" style="width:150px; height:40px" />
            <input type="reset" value="Reset" class="btn btn-danger" style="width:150px; height:40px" />
        </div>
    </div>


    <link href="~/Content/Site.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href="https://cdn.datatables.net/1.10.15/css/dataTables.bootstrap.min.css" rel="stylesheet" />
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />

    <script src="https://cdn.datatables.net/1.10.15/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.15/js/dataTables.bootstrap.min.js"></script>
    <script src="~/Scripts/moment.min.js"></script>
    <script>
        @*var Popup, dataTable;
        $(document).ready(function () {
          dataTable =   $("#actionTable").DataTable({
                "ajax": {
                    "url": "/Action/GetData",
                    "type": "GET",
                    "datatype": "json"
                },
                "columns": [
                    { "data": "reason" },
                    { "data": "problem" },
                    {
                        "data": "originationDate",

                        "render": function (value) {
                            if (value === null) return "";
                            return moment(value).format('DD/MM/YYYY');
                        }
                    },
                    {
                        "data": "targetDate",
                        "render": function (value) {
                            if (value === null) return "";
                            return moment(value).format('DD/MM/YYYY');
                        }
                    },
                    {
                        "data": "completionDate",
                        "render": function (value) {
                            if (value === null) return "";
                            return moment(value).format('DD/MM/YYYY');
                        }

                    },
                    { "data": "responsible" },
                    { "data": "progressValue" },

                        {"data":"id" , "render" : function (data) {
                            return "<a class='btn btn-default btn-sm' onclick=Kespa('@Url.Action("AddOrEdit","action")/" + data + "')><i class='fa fa-pencil'></i> Edit</a><a class='btn btn-danger btn-sm' style='margin-left:5px' onclick=Delete("+data+")><i class='fa fa-trash'></i> Delete</a>";
                    },
                        "orderable": false,
                        "searchable":false,
                        "width":"150px"
                    }


                    //{ "data": "idTypeOfAction" },


                    //{ "data": "rootCause" },
                    //{ "data": "correctiveAction" },




                    //{ "data": "measureEffic" },
                    //{ "data": "dateOfEffic" }
                ],
                "language": {
                    "emptyTable" : "No data found, Pleas click on <b> Add New Button</b>"
                }

            })
        });*@

        function Kespa(url) {
            var formDiv = $('<div/>');
            $.get(url)
                .done(function (response) {
                    formDiv.html(response);

                    Popup = formDiv.dialog({
                        autoOpen: true,
                        resizable: false,
                        title: 'Fill Actions Details',
                        height: 500,
                        width: 1100,
                        close: function () {
                            Popup.dialog('destroy').remove();
                        }

                    });
                });
        }


        function PopupForm(url) {
            var formDiv = $('<div/>');
            $.get(url)
                .done(function (response) {
                    formDiv.html(response);

                    Popup = formDiv.dialog({
                        autoOpen: true,
                        resizable: false,
                        title: 'Fill Actijjjjjjjons Details',
                        height: 300,
                        width: 1100,
                        close: function () {
                            Popup.dialog('destroy').remove();
                        }

                    });
                });
        }

        function SubmitForm(form) {
            $.validator.unobtrusive.parse(form);
            if ($(form).valid()) {
                $.ajax({
                    type: "POST",
                    url: form.action,
                    data: $(form).serialize(),
                    success: function (data) {
                        //if (data.success) {
                            Popup.dialog('close');
                            dataTable.ajax.reload();

                            $.notify(data.message, {
                                globalPosition: "top center",
                                className: 'superblue',
                                style: 'happyblue'
                            })

                        //}
                    }
                });
            }
            return false;
        }
         function Delete(id) {
            if(confirm('Are You Sure to Delete this Employee Record ?'))
            {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("Delete","Action")/' + id,
                    success: function (data) {
                        if (data.success)
                        {
                            dataTable.ajax.reload();

                            $.notify(data.message, {
                                globalPosition: "top center",
                                className: "success"
                            })

                        }
                    }

                });
            }
        }
        $.notify.addStyle('happyblue', {
            html: "<div>☺<span data-notify-text/>☺</div>",
            classes: {
                base: {
                    "width":"500px",
                    "white-space": "nowrap",
                    "background-color": "lightblue",
                    "padding": "5px"
                },
                superblue: {
                    "color": "white",
                    "background-color": "blue"
                }
            }
        });

    </script>


}


@model ccar.Models.ActionModel

@{
    /**/

    Layout = null;
}
<script src="~/Scripts/MyScripts/actionAdd.js"></script>
<script src="~/Scripts/MyScripts/selector.js"></script>
<script src="~/Scripts/MyScripts/targetDateConf.js"></script>

@using (Html.BeginForm("AddOrEdit", "Action", FormMethod.Post, new { onsubmit = "return SubmitForm(this)" }))
{

    @Html.HiddenFor(model => model.originationDate)
    @Html.HiddenFor(model => model.idInitiator)

    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @id = "koko" })

    <div class="form-group container">
        <div class="row">
            <div class="col-md-2 mb-2">


                @if (Model.idReason != 0)
                {
                    @Html.HiddenFor(model => model.idReason, new { idReason = Model.id })
                }


                @Html.Label("Problem(short)", new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.problem, null, new { @class = "koko" })
                @Html.EditorFor(model => model.problem, new { htmlAttributes = new { @class = "form-control" } })
            </div>



            @if (Model.showReas == true)
            {
            <div class="col-md-2 mb-2">
                @Html.Label("Reason*", new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.Reason, null, new { @class = "koko" }) 


                @*@{
        var listTempReason = (ccar.Models.ReasonModel.GetReasonList());
        listTempReason.Add(new ccar.Models.ReasonModel() { id = 0, reason = null });
                }
                @Html.DropDownListFor(model => model.idReason, new SelectList(listTempReason, "id", "reason"), new { @class = "form-control", @id = "filter" })*@
                @*@Html.DropDownListFor(model => model.Reason, new SelectList(ccar.Models.ReasonModel.GetReasonList().OrderBy(x => x.id), null, "reason"), new { @class = "form-control", @id = "filter" })*@
                @Html.DropDownListFor(model => model.Reason, new SelectList(ccar.Models.ReasonModel.GetReasonList().OrderBy(x => x.id), "Reason", "Reason", "id"), new { @class = "form-control", @id = "filter" })
            </div>
                    }



            
                @*<div class="col-md-1 mb-1" style="margin-left:-20px;">
                @Html.Label("More", new { @class = "control-label" })
                <button type="button" class="btn btn-default" style="display:block; background-color:indianred" onclick="location.href='@Url.Action("ReasonList", "Reason")'"> <span class="glyphicon glyphicon-edit" style="color:white; background-color:indianred" aria-hidden="true"></span></button>
            </div>*@
                <div class="col-md-3 mb-3" style="margin-left:-20px;">

                    @Html.Label("Type of action*", new { @class = "control-label" })
                    @Html.ValidationMessageFor(model => model.idTypeOfAction, null, new { @class = "koko" })

                    @{
                        var listTempToA = (ccar.Models.TypeOfActionModel.GetTypeOfActionList());
                        listTempToA.Add(new ccar.Models.TypeOfActionModel() { id = 0, typeOfAction1 = null });
                    }

                    @Html.DropDownListFor(model => model.idTypeOfAction, new SelectList(listTempToA.OrderBy(x => x.id), "id", "typeOfAction1"), new { @class = "form-control", })
                </div>

                @*<div class="col-md-1 mb-1 " style="margin-left:-20px;">
                @Html.Label("More", new { @class = "control-label" })
                <button type="button" class="btn btn-default" style="display:block; background-color:indianred" onclick="location.href='@Url.Action("ToAlist", "typeOfAction")'"> <span class="glyphicon glyphicon-edit" style="color:white; background-color:indianred" aria-hidden="true"></span></button>
            </div>*@

                <div class="col-md-3 mb-3" style="margin-left:-20px;">
                    @Html.Label("Responsible*", new { @class = "control-label" })
                    @Html.ValidationMessageFor(model => model.Responsible, null, new { @class = "koko" })
                    @*@{
                    var listOfResponsible = (ccar.Models.ResponsibleModel.getUsersList());
                    listOfResponsible.Add(new ccar.Models.ResponsibleModel() { id = 0, email = null, FirstName = null, Lastname = null, Name = null });
                }*@
                    @Html.DropDownListFor(model => model.Responsible, new SelectList(ccar.Models.ResponsibleModel.getUsersList().OrderBy(x => x.id), "Name", "Name", "id"), new { @class = "form-control", @id = "filter2" })
                    @*@Html.DropDownListFor(model => model.Reason, new SelectList(ccar.Models.ReasonModel.GetReasonList().OrderBy(x => x.id), "id", "reason"), new { @class = "form-control", @id = "filter" })*@

                </div>
                <div class="col-md-1 mb-1 " style="margin-left:-20px;">
                    @Html.Label("More", new { @class = "control-label" })
                    <button type="button" class="btn btn-default" style="display:block; background-color:indianred" onclick="location.href='@Url.Action("ResponsiblesList", "Responsible")'"> <span class="glyphicon glyphicon-edit" style="color:white; background-color:indianred" aria-hidden="true"></span></button>
                </div>

            </div>
    </div>

    <div class="form-group container">
        <div class="row">
            <div class="col-md-4 mb-4">
                @Html.Label("Problem detail(long)", new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.problemLong, null, new { @class = "koko" })
                @Html.TextAreaFor(model => model.problemLong, 5, 39, new { htmlAttributes = new { @class = "form-control" } })


            </div>
            <div class="col-md-4 mb-4">
                @Html.Label("Root Cause", new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.rootCause, null, new { @class = "koko" })
                @Html.TextAreaFor(model => model.rootCause, 5, 39, new { htmlAttributes = new { @class = "form-control" } })


            </div>
            <div class="col-md-4 mb-4">
                @Html.Label("Corrective Action", new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.correctiveAction, null, new { @class = "koko" })
                @Html.TextAreaFor(model => model.correctiveAction, 5, 39, new { htmlAttributes = new { @class = "form-control" } })

            </div>
        </div>
    </div>

    <div class="form-group container">
        <div class="row">
            <div class="col-md-4 mb-4">
                @Html.Label("Target date*", new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.targetDate, null, new { @class = "koko" })
                @Html.EditorFor(model => model.targetDate, new { htmlAttributes = new { @class = "form-control", @id = "kespa" } })
            </div>
            <div class="col-md-4 mb-4">
                @Html.Label("Progress", new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.idProgress, null, new { @class = "koko" })
                @Html.DropDownListFor(model => model.idProgress, new SelectList(ccar.Models.ProgressModel.GetProgressList().OrderBy(x => x.id), "id", "progressValue"), new { @class = "form-control" })
            </div>
        </div>
    </div>
    <div class="form-group container">
        <div class="row">
            <div class="col-md-4 mb-4">
                @Html.Label("Efficiency measure*", new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.measureEffic, null, new { @class = "koko" })
                @Html.EditorFor(model => model.measureEffic, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-md-4 mb-4">
                @Html.Label("Date of efficiency*", new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.dateOfEffic, null, new { @class = "koko" })
                @Html.EditorFor(model => model.dateOfEffic, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
    </div>

    <div class="form-group container">
        <div class="row">
            <div class="col-md-12 mb-12 text-center">
                <input type="submit" value="Submit" class="btnAdd btn btn-success" style="width:250px; height:40px" />
                <input type="reset" value="Reset" class="btn btn-danger" style="width:250px; height:40px" />
            </div>
        </div>
    </div>

    <div class="form-group container">
        <div class="row">
            <div class="col-md-5 mb-5 text-center">
            </div>
            <div class="col-md-5 mb-5 text-center">
            </div>
            <div class="col-md-2 mb-2 text-center">
                <span style="color:red; font-style:oblique;">* Required</span>
            </div>
        </div>
    </div>


}
